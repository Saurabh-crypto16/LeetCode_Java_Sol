class Solution {
    public int collect(int[][] grid, int i, int j, boolean[][] vis){
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || vis[i][j] || grid[i][j]==0)    
            return 0;
        
        vis[i][j]=true;
        
        int up=collect(grid,i-1,j,vis);
        int down=collect(grid,i+1,j,vis);
        int left=collect(grid,i,j-1,vis);
        int right=collect(grid,i,j+1,vis);
        
        vis[i][j]=false;  //backtracking
        return grid[i][j]+Math.max(Math.max(up,down), Math.max(left,right));
    }
    
    public int getMaximumGold(int[][] grid) {
        boolean[][] vis=new boolean[grid.length][grid[0].length];
        int max=Integer.MIN_VALUE;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(!vis[i][j] && grid[i][j]!=0){
                    ArrayList<Integer> bag=new ArrayList<>();
                    
                    int sum=collect(grid,i,j,vis);
                    
                    max=Math.max(max,sum);
                }
            }
        }
        return max;
    }
}
