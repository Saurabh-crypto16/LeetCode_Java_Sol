/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer,List<TreeNode>> ans=new HashMap<Integer,List<TreeNode>>();
    public List<TreeNode> allPossibleFBT(int n) {
        List<TreeNode> res=new ArrayList<TreeNode>();
        
        if(n%2==0)  return res;
        if(ans.containsKey(n))  return ans.get(n);
        if(n==1){
            res.add(new TreeNode(0));
            return res;
        }
        n--;
        
        for(int i=1;i<n;i++){
            List<TreeNode> left=allPossibleFBT(i);
            List<TreeNode> right=allPossibleFBT(n-i);
            
            for(TreeNode l: left){
                for(TreeNode r: right){
                    TreeNode curr=new TreeNode(0);
                    curr.left=l;
                    curr.right=r;
                    res.add(curr);
                }
            }
        }
        
        ans.put(n,res);
        return res;
    }
}
